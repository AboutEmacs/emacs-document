#+TITLE: zsh shell inside Emacs on Windows
#+URL: https://www.onwebsecurity.com/configuration/zsh-shell-inside-emacs-on-windows.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2019年 02月 28日 星期四 13:06:00 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

[[https://www.onwebsecurity.com/images/zsh-shell-inside-emacs-on-windows.png]]

The most obvious advantage of running a cross-platform shell (for example Bash
or zsh) is that you can use the same syntax and scripts on multiple
platforms. Setting up (alternative) shells on Windows can be pretty tricky, but
the small investment is well worth the reward.

The MSYS2 subsystem allows you to run shells like Bash or zsh on Windows. An
important part of MSYS2 is making sure that the search paths are all pointing to
the MSYS2 subsystem: There are a lot of dependencies.

Bash is the default shell once MSYS2 is installed; zsh can be installed using
the package manager:

#+BEGIN_EXAMPLE
    pacman -Sy zsh
#+END_EXAMPLE

Setting zsh as default shell can be done by modifying the = /etc/passwd=
file, for instance:

#+BEGIN_EXAMPLE
    mkpasswd -c | sed -e 's/bash/zsh/' | tee -a /etc/passwd
#+END_EXAMPLE

This will change the default shell from bash to zsh.

Running zsh under Emacs on Windows can be done by modifying the
= shell-file-name=
variable, and pointing it to the zsh binary from the MSYS2
subsystem. The shell binary has to be somewhere in the Emacs = exec-path=
variable.

#+BEGIN_EXAMPLE
    (setq shell-file-name (executable-find "zsh.exe"))
#+END_EXAMPLE

Don't forget to modify the PATH environment variable for Emacs, as the
MSYS2 paths should be resolved before Windows paths. Using the same
example, where MSYS2 is installed under

#+BEGIN_EXAMPLE
    
    c:\programs\msys2
#+END_EXAMPLE

:

#+BEGIN_EXAMPLE
    (setenv "PATH" "C:\\programs\\msys2\\mingw64\\bin;C:\\programs\\msys2\\usr\\local\\bin;C:\\programs\\msys2\\usr\\bin;C:\\Windows\\System32;C:\\Windows")
#+END_EXAMPLE

After setting these two variables in the Emacs configuration file,
running

#+BEGIN_EXAMPLE
    
    M-x shell
#+END_EXAMPLE

in Emacs should bring up the familiar zsh prompt.

in Emacs should bring up the familiar zsh prompt.

Emacs' terminal settings (eterm) are different than MSYS2' standard
terminal settings (xterm-256color). This means that some plugins or
themes (prompts) might not work - especially when using oh-my-zsh.

Detecting whether zsh is started under Emacs is easy, using the variable

#+BEGIN_EXAMPLE
    
    $INSIDE_EMACS
#+END_EXAMPLE

. This codesnippet in

#+BEGIN_EXAMPLE
    
    .zshrc
#+END_EXAMPLE

(which will be sourced for
interactive shells) only enables the git plugin when being run in Emacs,
and changes the theme

#+BEGIN_EXAMPLE
    # Disable some plugins while running in Emacs
    if [[ -n "$INSIDE_EMACS" ]]; then
     plugins=(git)
     ZSH_THEME="simple"
    else
     ZSH_THEME="compact-grey"
    fi
#+END_EXAMPLE

. This codesnippet in(which will be sourced for interactive shells) only enables the git plugin when being run in Emacs, and changes the theme

By adding the = INSIDE_EMACS=
variable to the local = ~/.ssh/config=
as = SendEnv=
variable...

#+BEGIN_EXAMPLE
    Host myhost
    SendEnv INSIDE_EMACS
#+END_EXAMPLE

... and to a ssh server as = AcceptEnv=
variable in = /etc/ssh/sshd_config=
...

#+BEGIN_EXAMPLE
    AcceptEnv LANG LC_* INSIDE_EMACS
#+END_EXAMPLE

... this even works when ssh'ing inside an Emacs shell session to another ssh
server, running zsh. When ssh'ing in the zsh shell inside Emacs on Windows,
using the parameters = -t -t=
forces pseudo-tty allocation (which is
necessary, as Emacs on Windows don't have a true tty).

Cross-platform, open-source goodyness...
