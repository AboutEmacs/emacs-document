#+TITLE: threading macros from dash for Emacs Lisp | Yoo Box
#+URL: https://yoo2080.wordpress.com/2014/02/23/threading-macros-from-dash-for-emacs-lisp/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 12月 10日 星期一 14:16:15 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

** 1. what are threading macros? where do they come from?
   :PROPERTIES:
   :CUSTOM_ID: sec-1
   :END:

For example, what is this

#+BEGIN_EXAMPLE
    (-> 2 (expt 0.2) (* 2017) sin) ; ⇒ -1.0
#+END_EXAMPLE

The Clojure language has some neat macros (such as =->= and =->>=) which are called /threading macros/ (nothing to do with [[http://en.wikipedia.org/wiki/Thread_(computing)][these threads]]) which let you unwrap some types of deeply nested forms. The [[https://github.com/magnars/dash.el][dash library]] for Emacs Lisp implements some of those threading macros. While I do not use threading macros in my elisp code, I know that elisp beginners would love using these macros, so I wrote this article.

Prerequisites: Readers are /not/ required to be familiar with Clojure or dash, but you are assumed to be able to install the dash library. Unwillingness to check the length of the word humuhumunukunukuapuaa by hand is required.

Common Lisp Note: These threading macros can be defined in Common Lisp too. When you define them, don't forget that threading macros are more than just function call chaining. What I mean by that? I'll get to that soon.

** 2. how to use the dash library
   :PROPERTIES:
   :CUSTOM_ID: sec-2
   :END:

After you install the dash library, you will have to put =(require 'dash)= somewhere in your init file. Where?

You probably have something like the following two lines in your init file.

#+BEGIN_EXAMPLE
    (package-initialize)
    (setq package-enable-at-startup nil)
#+END_EXAMPLE

You want to make sure that the line =(require 'dash)= runs after =(package-initialize)= runs, but before any code that relies on functions or macros from the dash library runs. Simplest way to do that is to put =(require 'dash)= right after the package-initialize lines so that your init file code looks like:

#+BEGIN_EXAMPLE
    ...

    (package-initialize)
    (setq package-enable-at-startup nil)

    (require 'dash)

    ...
#+END_EXAMPLE

** 3. thread-first nesting and the thread-first macro
   :PROPERTIES:
   :CUSTOM_ID: sec-3
   :END:

Before we begin, let's talk about deeply nested forms.

Let's start with:

#+BEGIN_EXAMPLE
    (f3 (f2 (f1 x c1 d1) c2 d2) c3 d3)
#+END_EXAMPLE

That is an f1 form within an f2 form within an f3 form. If f1, f2, f3 were functions (as opposed to macros), that could mean “take object x, apply f1 to it with additional arguments c1 and d1, then apply f2 to the result with additional arguments c2 and c2, then apply f3 to the result ...”.

To help make your code more readable, you could write that form in multiple lines as:

#+BEGIN_EXAMPLE
    (f3 (f2 (f1 x
     c1 d1)
     c2 d2)
     c3 d3)
#+END_EXAMPLE

or:

#+BEGIN_EXAMPLE
    (f3 (f2 (f1 x
     c1
     d1)
     c2
     d2)
     c3
     d3)
#+END_EXAMPLE

or in combination of both styles depending on which arguments are complex forms themselves.

Alternatively, you can use the macro =->= (the “thread-first” macro from the dash library) to write this instead:

#+BEGIN_EXAMPLE
    (-> x
     (f1 c1 d1)
     (f2 c2 d2)
     (f3 c3 d3))
#+END_EXAMPLE

** 4. example uses of the thread-first macro
   :PROPERTIES:
   :CUSTOM_ID: sec-4
   :END:

There is a saying,”never date anyone under half your age plus seven”. Suppose you are a 200 year old turtle. You are not supposed to date turtles under age 107. You take the number 200, divide it by 2, then add 7, that's 107. You can compute that with this form which you must read inside-out:

#+BEGIN_EXAMPLE
    (+ (/ 200 2) 7)
#+END_EXAMPLE

You can also write the same computation using the =->= macro like this which you can read from left to right rather than inside-out:

#+BEGIN_EXAMPLE
    (-> 200 (/ 2) (+ 7))
#+END_EXAMPLE

Some argue that writing an inside-out expression is unnatural for humans, but I heard from somewhere that the English expression “Sum the balance of all savings accounts” is a perfectly natural inside-out expression (inside-out from a procedural perspective). The threading macros (and serial binding forms that I will get to) give you choice: you can either write an inside-out expression or an expression to be read from left to right (or from top to bottom).

You've seen an example of a =->= form that you read left to right. Now let's see an example that you read from top to bottom. The following code starts with a long list, then removes duplicates from the list, then removes 0s and 1s, and then sorts it.

#+BEGIN_EXAMPLE
    (-> (list 9 9 9 1 0 1 0 3 3)
     (cl-remove-duplicates)
     (cl-set-difference (list 0 1))
     (sort '<))
    ;; ⇒ (3 9)
#+END_EXAMPLE

You could take the length of the final list instead like this:

#+BEGIN_EXAMPLE
    (-> (list 9 9 9 1 0 1 0 3 3)
     (cl-remove-duplicates)
     (cl-set-difference (list 0 1))
     (length))
    ;; ⇒ 2
#+END_EXAMPLE

That in turn can be written simpler like this:

#+BEGIN_EXAMPLE
    (-> (list 9 9 9 1 0 1 0 3 3)
     cl-remove-duplicates
     (cl-set-difference (list 0 1))
     length) ; <-- instead of (length)
#+END_EXAMPLE

** 5. side note on fear of deeply nested forms
   :PROPERTIES:
   :CUSTOM_ID: sec-5
   :END:

Some Lisp beginners tend to fear reading and writing of deeply nested forms (even three or four levels of nesting could feel too deep). Since this article tend to attract those beginners, I'd like to include my explanation for why you should not fear.

For reading deeply nested forms, sometimes keybindings for structural movement (for example, =C-M-u=) help a lot when reading from indentation seems not enough. For writing, with paredit you will be able to figure out a way to write a nested form from inside out, or from outside in, or whatever order you choose to write. With these tips in mind, one can eventually overcome fear of something like:

#+BEGIN_EXAMPLE
    ;; from color.el
    (defun color-saturate-name (name percent)
     "Make a color with a specified NAME more saturated by PERCENT."
     (apply 'color-rgb-to-hex
     (apply 'color-hsl-to-rgb
     (apply 'color-saturate-hsl
     (append
     (apply 'color-rgb-to-hsl
     (color-name-to-rgb name))
     (list percent))))))
#+END_EXAMPLE

Maybe read my previous articles on [[https://yoo2080.wordpress.com/2014/07/04/it-is-not-hard-to-read-lisp-code/][how to read Lisp code easily]] and [[https://yoo2080.wordpress.com/2014/07/20/it-is-not-hard-to-edit-lisp-code/][how to edit Lisp code easily]]. End of side note.

** 6. thread-last nesting and the thread-last macro
   :PROPERTIES:
   :CUSTOM_ID: sec-6
   :END:

#+BEGIN_EXAMPLE
    (f3 a3 b3 (f2 a2 b2 (f1 a1 b1 x)))
#+END_EXAMPLE

can be written in multiline as:

#+BEGIN_EXAMPLE
    (f3 a3 b3
     (f2 a2 b2
     (f1 a1 b1
     x)))
#+END_EXAMPLE

or as:

#+BEGIN_EXAMPLE
    (f3 a3
     b3
     (f2 a2
     b2
     (f1 a1
     b1
     x)))
#+END_EXAMPLE

or you can use the macro =->>= (the “thread-last” macro from the dash library) to write that instead as:

#+BEGIN_EXAMPLE
    (->> x
     (f1 a1 b1)
     (f2 a2 b2)
     (f3 a3 b3))
#+END_EXAMPLE

** 7. example uses of the thread-last macro
   :PROPERTIES:
   :CUSTOM_ID: sec-7
   :END:

#+BEGIN_EXAMPLE
    (->> "1 3 5 7 9 11 13 15 17 19"
     split-string
     (mapcar 'string-to-int)
     (cl-reduce '+))
    ;; ⇒ 100
#+END_EXAMPLE

That splits the string to get a list of strings, then maps =string-to-int= to the list in order to get a list of numbers, then sums the numbers.

** 8. thread-middle macro
   :PROPERTIES:
   :CUSTOM_ID: sec-8
   :END:

This deeply nested Lisp form

#+BEGIN_EXAMPLE
    (f3 a3 b3 (f2 a2 b2 (f1 a1 b1 x c1 d1) c2 d2) c3 d3)
#+END_EXAMPLE

can be indented like

#+BEGIN_EXAMPLE
    (f3 a3 b3
     (f2 a2 b2
     (f1 a1 b1
     x
     c1 d1)
     c2 d2)
     c3 d3)
#+END_EXAMPLE

or like

#+BEGIN_EXAMPLE
    (f3 a3
     b3
     (f2 a2
     b2
     (f1 a1
     b1
     x
     c1
     d1)
     c2
     d2)
     c3
     d3)
#+END_EXAMPLE

That can be written using the macro =-->= as:

#+BEGIN_EXAMPLE
    (--> x
     (f1 a1 b1 it c1 d1)
     (f2 a2 b2 it c2 d2)
     (f3 a3 b3 it c3 d3))
#+END_EXAMPLE

Clojure Note: Clojure users who want to use thread-middle macro in Clojure code should see [[http://stackoverflow.com/questions/10068398/generalized-threading-macro-in-clojure][Generalized Threading Macro in Clojure]].

** 9. rewriting some deeply nested form as a serial binding
   :PROPERTIES:
   :CUSTOM_ID: sec-9
   :END:

If f1, f2, f3 are functions (as opposed to macros), one can also simply write this:

#+BEGIN_EXAMPLE
    (let ((it x))
     (setq it (f1 a1 b1 it c1 d1)
     it (f2 a2 b2 it c2 d2))
     (f3 a3 b3 it c3 d3))
#+END_EXAMPLE

or this:

#+BEGIN_EXAMPLE
    (let* ((it x)
     (it (f1 a1 b1 it c1 d1))
     (it (f2 a2 b2 it c2 d2)))
     (f3 a3 b3 it c3 d3))
#+END_EXAMPLE

or you can use the threading macro.

** 10. threading macros are more than serial binding
   :PROPERTIES:
   :CUSTOM_ID: sec-10
   :END:

Threading macros can be more than just chaining function calls because you can use them with other macros like loop macros or conditionals. For example, you can write your own REPL (Read Eval Print Loop) like this:

#+BEGIN_EXAMPLE
    (-> (read t) ; Read
     eval ; Eval
     print ; Print
     (cl-loop (sit-for 1))) ; Loop
#+END_EXAMPLE

which expands to:

#+BEGIN_EXAMPLE
    (cl-loop
     (print (eval (read t)))
     (sit-for 1))
#+END_EXAMPLE

(Try it. You can get out of the infinite loop by pressing =C-g=)

Is humuhumunukunukuapuaa a long word? I would consider words longer than 20 letters as long words.

#+BEGIN_EXAMPLE
    (--> "humuhumunukunukuapuaa"
     (length it)
     (< it 20)
     (if it 'short 'long))
    ;; ⇒ long
#+END_EXAMPLE

Yes, it is long.

** 11. closing notes
   :PROPERTIES:
   :CUSTOM_ID: sec-11
   :END:

- This article is part of the [[https://yoo2080.wordpress.com/2013/08/07/living-with-emacs-lisp/][Living with Emacs Lisp]] series.
- Why are they called threading macros? I do not know.

Everything I want beginners to know for this topic is covered now. The rest is optional reading.

** 12. optional reading
   :PROPERTIES:
   :CUSTOM_ID: sec-12
   :END:

*** 12.1. sum under reciprocal
    :PROPERTIES:
    :CUSTOM_ID: sec-12-1
    :END:

Alice takes 30 minutes to finish a bowl of jjajangmyeon. Bob takes 40 minutes to finish the same. With Alice and Bob working together on the same one bowl of jjajangmyeon, how many minutes does it take to finish the bowl? Sum of 30 minutes and 40 minutes [[http://prog21.dadgum.com/121.html][under reciprocal]]. To calculate it,

#+BEGIN_EXAMPLE
    (->> (list 30 40)
     (--map (/ 1.0 it))
     (-reduce '+)
     (/ 1.0))
    ;; ⇒ 17.142857142857142
#+END_EXAMPLE

So it takes about 17 minutes.

*** 12.2. art of minimizing use of thread-middle macro
    :PROPERTIES:
    :CUSTOM_ID: sec-12-2
    :END:

In Clojure, consensus seems to be that Clojure libraries should be designed in such a way that users usually only have to use just one of the thread-first macro and the thread-last macro just once for a group of steps. The dash library and the [[https://github.com/magnars/s.el][s library]] are two Emacs Lisp libraries that sticks to that Clojure consensus and that is a sort of selling point of the two libraries. For example, many functions from dash that work on lists consistently take the list as the last argument so that you can use just the thread-last macro with them. If you want to get the most out of threading macros, you may want to start depending on functions from the two libraries.

My examples in this article show some reliance on [[http://www.gnu.org/software/emacs/manual/html_node/cl/][CL-LIB]] functions (rather than functions from the two libraries: dash and s) because I tend to depend on CL-LIB functions and also because I am not assuming the readers to be familiar with functions from the two libraries. (I tend to use CL-LIB more because it's shipped with Emacs.)

Clojure programmers sometimes come to a situation where they have to write a form that seems to require two or three times last-argument threading and just one first-argument or middle-argument threading. In that case, some of them tend to use a neat trick to manage to write it with the thread-last macro (rather than write it with the thread-middle macro). An Emacs Lisp equivalent would be, for example, you might be using the s library and you want to take a list of strings, trim them, then join them with comma, and then wrap the result in curly braces using just the threading-last macro, but you are wondering what to do with the last step. You can just do this:

#+BEGIN_EXAMPLE
    (require 's)
    (->> (list " bacon " "milk" "tofu")
     (-map 's-trim)
     (s-join ", ")
     ((lambda (s) (concat "{" s "}"))))
#+END_EXAMPLE

That's the trick (the use of lambda in the last step). Actually in this particular case, you don't need that trick, you can just write:

#+BEGIN_EXAMPLE
    (->> (list " bacon " "milk" "tofu")
     (-map 's-trim)
     (s-join ", ")
     (s-prepend "{")
     (s-append "}"))
#+END_EXAMPLE

Or you can use [[https://kotka.de/blog/2010/04/Did_you_know_II.html][this trick]] too.

