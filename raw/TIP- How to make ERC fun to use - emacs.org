#+TITLE: TIP: How to make ERC fun to use : emacs
#+URL: https://www.reddit.com/r/emacs/comments/8ml6na/tip_how_to_make_erc_fun_to_use/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 06月 20日 星期三 13:08:42 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
Another week, another trick. This week, I will present you my way of using =erc=, following the recommendation of several people. I apologize in advance for the relatively long post, I just like to be complete so that anyone can understand this post. First, for those who don't know IRC, it's roughly, which allows you to communicate with other people in real time on different channels. IRC is the best way for me to get a quick answer to a simple question and to learn from more competent people than me on a subject. For example, what I like to do when I learn a new language is to join their IRC channel, scan the logs at the end of each day and try to understand the questions with their answers asked. At first, it's confusing, but little by little I am familiar with the vocabulary used.

Before going any further, here is what my =erc= looks like:

After ERC configuration

If you're still interested in knowing more, then let's keep going!

The question you need to ask yourself is how to use IRC so that it saves you more time than waste, because we quickly tend to spend our days sailing between the different channels, a bit like on Reddit. For my part, I wanted a configuration that was pleasant to read, targeting only what is necessary to be read and that informs me when someone has answered my question.

Without going into details, here is the beginning of the configuration that I use:

#+BEGIN_EXAMPLE
    (use-package erc
     :custom
     (erc-autojoin-channels-alist '(("freenode.net" "#archlinux" "#bash" "#bitcoin"
     "#emacs" "#gentoo" "#i3" "#latex" "#org-mode" "#python")))
     (erc-autojoin-timing 'ident)
     (erc-fill-function 'erc-fill-static)
     (erc-fill-static-center 22)
     (erc-hide-list '("JOIN" "PART" "QUIT"))
     (erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
     (erc-lurker-threshold-time 43200)
     (erc-prompt-for-nickserv-password nil)
     (erc-server-reconnect-attempts 5)
     (erc-server-reconnect-timeout 3)
     (erc-track-exclude-types '("JOIN" "MODE" "NICK" "PART" "QUIT"
     "324" "329" "332" "333" "353" "477"))
     :config
     (add-to-list 'erc-modules 'notifications)
     (add-to-list 'erc-modules 'spelling)
     (erc-services-mode 1)
     (erc-update-modules))
#+END_EXAMPLE

Roughly, this makes it possible to make a nice margin for the display, allow a connection using the password from my =authinfo.gpg= file, avoid warning me when a user joins and leaves a channel, enable notifications and the spell checking on the fly.

Besides, for people like me, who want to store your password in a GPG file, you just need to specify a file priority list, to tell =erc= where to start looking for your password first:

#+BEGIN_EXAMPLE
    (setq auth-sources '("~/Sync/shared/.authinfo.gpg"
     "~/.authinfo.gpg"
     "~/.authinfo"
     "~/.netrc"))
#+END_EXAMPLE

and of course, don't forget to add this line in your =.authinfo.gpg= file, where <nickname> and <password> match your real information:

#+BEGIN_EXAMPLE
    machine irc.freenode.net login <nickname> password <password>
#+END_EXAMPLE

*NOTE:* replace =auth-sources= with the one that suits you best.

If you are still with me, I will list you some functions that I use, which allow to complete the configuration presented above.

-- In order to avoid opening several =erc= instances, I use a function that will ensure that only one connection instance exists:

#+BEGIN_EXAMPLE
    (defun my/erc-start-or-switch ()
     "Connects to ERC, or switch to last active buffer."
     (interactive)
     (if (get-buffer "irc.freenode.net:6667")
     (erc-track-switch-buffer 1)
     (when (y-or-n-p "Start ERC? ")
     (erc :server "irc.freenode.net" :port 6667 :nick "rememberYou"))))
#+END_EXAMPLE

-- Another thing that I like, is to automatically receive a notification when I get a private message, or when my nickname is quoted on a channel so I can respond quickly. This notification includes as title the pseudonym of the person as well as his message as content:​​

#+BEGIN_EXAMPLE
    (defun my/erc-notify (nickname message)
     "Displays a notification message for ERC."
     (let* ((channel (buffer-name))
     (nick (erc-hl-nicks-trim-irc-nick nickname))
     (title (if (string-match-p (concat "^" nickname) channel)
     nick
     (concat nick " (" channel ")")))
     (msg (s-trim (s-collapse-whitespace message))))
     (alert (concat nick ": " msg) :title title)))
#+END_EXAMPLE

-- One thing that bothered me about =erc= was that I liked to know how many people were on the channel so I could get an idea if I was going to get a quick answer or not. This is done with the following code:

#+BEGIN_EXAMPLE
    (defun my/erc-count-users ()
     "Displays the number of users connected on the current channel."
     (interactive)
     (if (get-buffer "irc.freenode.net:6667")
     (let ((channel (erc-default-target)))
     (if (and channel (erc-channel-p channel))
     (message "%d users are online on %s"
     (hash-table-count erc-channel-users)
     channel)
     (user-error "The current buffer is not a channel")))
     (user-error "You must first start ERC")))
#+END_EXAMPLE

-- From time to time I wanted to copy and paste a source on a channel, and get myself kicked for spam after sending this message several times in a short time. To avoid these problems, this function comes to your rescue:​

#+BEGIN_EXAMPLE
    (defun my/erc-preprocess (string)
     "Avoids channel flooding."
     (setq str
     (string-trim
     (replace-regexp-in-string "\n+" " " str))))
#+END_EXAMPLE

-- Two other packages I like to use. The first package is =erc-hl-nicks=, which allows me to associate a color with a pseudonym. I find it convenient because it gives me a first visual impression if a person answered. Finally, the second package is =erc-image=, which automatically displays images as links, on a channel. This allows me to avoid having to click on the link to see the image:

#+BEGIN_EXAMPLE
    (use-package erc-hl-nicks
     :after erc)

    (use-package erc-image
     :after erc)
#+END_EXAMPLE

In order to not overload this post, you can find my complete configuration on [[https://github.com/rememberYou/.emacs.d][GitHub]].

Feel free to complete this post by sharing a few points of your configuration that you want to share, as well as various packages that you use.

See you soon on IRC! I wish you a good evening or a good day, Emacs friend!
