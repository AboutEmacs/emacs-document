#+TITLE: Uses of regular expressions in Emacs
#+URL: https://www.johndcook.com/blog/2018/01/27/emacs-features-that-use-regular-expressions/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 07月 06日 星期五 14:57:15 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
The syntax of regular expressions in Emacs is a little disappointing, but the ways you can use regular expressions in Emacs is impressive.

I've written [[https://www.johndcook.com/blog/regex-perl-python-emacs/][before]] about the syntax of Emacs regular expressions. It's a pretty conservative subset of the features you may be used to from other environments as summarized in the diagram below.

[[https://www.johndcook.com/blog/regex-perl-python-emacs/][[[//www.johndcook.com/perl-python-emacs.png]]]]

But there are many, many was to use regular expressions in Emacs. I did a quick search and found that about 15% of the pages in the massive Emacs manual contain at least one reference to regular expressions. Exhaustively listing the uses of regular expressions would not be practical or very interesting. Instead, I'll highlight a few uses that I find helpful.

* Searching and replacing
   :PROPERTIES:
   :CUSTOM_ID: searching-and-replacing
   :END:

One of the most frequently used features in Emacs is incremental search. You can search forward or backward for a string, searching as you type, with the commands =C-s= (=isearch-forward=) and =C-r= (=isearch-backward=). The regular expression counterparts of these commands are =C-M-s= (=isearch-forward-regexp=) and =C-M-r= (=isearch-backward-regexp=).

Note that the regular expression commands add the Alt (meta) key to their string counterparts. Also, note that Emacs consistently refers to regular expressions as =regexp= and never, as far as I know, as =regex=. (Emacs relies heavily on [[https://www.johndcook.com/blog/2011/05/26/software-architecture-and-trust/][conventions]] like this to keep the code base manageable.)

A common task in any editor is to search and replace text. In Emacs you can replace all occurrences of a regular expression with =replace-regexp= or interactively choose which instances to replace with =query-replace-regexp=.

* Purging lines
   :PROPERTIES:
   :CUSTOM_ID: purging-lines
   :END:

You can delete all lines in a file that contain a given regular expression with =flush-lines=. You can also invert this command, specifying which lines not to delete with =keep-lines=.

* Aligning code
   :PROPERTIES:
   :CUSTOM_ID: aligning-code
   :END:

One lesser-known but handy feature is =align-regexp=. This command will insert white space as needed so that all instances of a regular expression in a region align vertically. For example, if you have a sequence of assignment statements in a programming language you could have all the equal signs line up by using =align-regexp= with the regular expression consisting simply of an equal sign. Of course you could also align based on a much more complex pattern.

Although I imagine this feature is primarily used when editing source code, I imagine you could use it in other context such as aligning poetry or [[https://www.johndcook.com/blog/2016/06/15/ascii-art-diagrams-in-emacs-org-mode/][ASCII art diagrams]].

* Directory editing
   :PROPERTIES:
   :CUSTOM_ID: directory-editing
   :END:

The Emacs directory editor =dired= is something like the Windows File Explorer or the OSX Finder, but text-based. =dired= has many features that use regular expressions. Here are a few of the more common ones.

You can mark files based on the file names with =% m= (=dired-mark-files-regexp=) or based on the contents of the files with =% g= (=dired-mark-files-containing-regexp=). You can also mark files for deletion with =% d= (=dired-flag-files-regexp=).

Inside =dired= you can search across a specified set of files by typing =A= (=dired-do-find-regexp=), and you can interactively search and replace across a set of files by typing =Q= (=dired-do-find-regexp-and-replace=).

* Miscellaneous
   :PROPERTIES:
   :CUSTOM_ID: miscellaneous
   :END:

The help apropos command (=C-h a=) can take a string or a regular expression.

The command to search for available fonts (=list-faces-display=) can take a string or regular expression.

Interactive highlighting commands (=highlight-regexp=, =unhighlight-regexp=, =highlight-lines-matching-regexp=) take a regular expression argument.

You can use a regular expression to specify which buffers to close with =kill-matching-buffers=.

Maybe the largest class of uses for regular expressions in Emacs is configuration. Many customizations in Emacs, such as giving Emacs hints to determine the right editing mode for a file or how to recognize comments in different languages, use regular expressions as arguments.

* Resources
   :PROPERTIES:
   :CUSTOM_ID: resources
   :END:

You can find more posts on regular expressions and on Emacs by going to my [[https://www.johndcook.com/blog/notes/][technical notes]] page. Note that the outline at the top has links for [[https://www.johndcook.com/blog/notes/#regex][regular expressions]]\\
and for [[https://www.johndcook.com/blog/notes/#emacs][Emacs]].

For daily tips on regular expressions or Unix-native tools like Emacs, follow [[https://twitter.com/regextip][@RegexTip]] and [[https://twitter.com/unixtooltip][@UnixToolTip]] on Twitter.
