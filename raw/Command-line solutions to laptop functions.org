#+TITLE: Command-line solutions to laptop functions
#+URL: http://tech.toryanderson.com/2018/03/10/command-line-solutions-to-laptop-functions/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 04月 16日 星期一 11:14:26 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
*Edits & Additions:*

- 2018.03.28 I've supplemented the Network section since I now use nm-applet. I also added Alt+Tab buffer swapping and a copy of the exwm portion of my emacs.el.

Trying to make the jump to exwm, which is a similar experience (though considerably less documented) than switching to i3wm, there are a number of core laptop functionalities that the heavier-weight window managers take care of for you. I'm using this on a laptop that is often used that way -- travelling, connecting to multiple different wifi networks daily, connecting to docking stations and extra monitors and devices, toggling touchpad, etc. In my quest to get this figured out, here are some of the major things I've dealt with.

* Controlling the power key
  :PROPERTIES:
  :CUSTOM_ID: controlling-the-power-key
  :END:

The power button isn't handled by the window manager, it's handled by systemd

For example this is in my /etc/systemd/logind.conf

#+BEGIN_EXAMPLE
    [Login]
    HandlePowerKey=hibernate
    HandleLidSwitch=ignore
    IdleAction=suspend
    IdleActionSec=20min
#+END_EXAMPLE

* Toggling the touchpad
  :PROPERTIES:
  :CUSTOM_ID: toggling-the-touchpad
  :END:

This was solved by implementing the following shell script:

#+BEGIN_EXAMPLE
    #!/bin/bash

    declare -i ID
    ID=`xinput list | grep -Eo 'Touchpad\s*id\=[0-9]{1,2}' | grep -Eo '[0-9]{1,2}'`
    declare -i STATE
    STATE=`xinput list-props $ID|grep 'Device Enabled'|awk '{print $4}'`
    if [ $STATE -eq 1 ]
    then
     xinput disable $ID
     echo "Touchpad disabled."
     # notify-send -a 'Touchpad' 'Disabled' -i /usr/share/icons/Adwaita/48x48/devices/input-touchpad.png
    else
     xinput enable $ID
     echo "Touchpad enabled."
     # notify-send -a 'Touchpad' 'Enabled' -i /usr/share/icons/Adwaita/48x48/devices/input-touchpad.png
    fi
#+END_EXAMPLE

I then bound this to my desired key (since I'm using exwm, I bound it in my emacs.el, with =touchpad_toggle= being the name of the script I created above):

#+BEGIN_EXAMPLE
    (exwm-input-set-key (kbd "s-<f7>")
     (lambda () (interactive) 
     (shell-command (executable-find "touchpad_toggle"))))
#+END_EXAMPLE

* Lock Screen
  :PROPERTIES:
  :CUSTOM_ID: lock-screen
  :END:

xscreensaver took care of this. Once I'd installed xscreensaver from my repos -- including the extras to get the gl-slideshow that I wanted as my lockscreen -- I ran =xscreensaver-demo= to set it up to my desires. Then I created a one-liner that I named =lockscreen=, and bound it in my emacs file:

#+BEGIN_EXAMPLE
    #!/bin/bash

    xscreensaver-command -lock

    (exwm-input-set-key (kbd "s-l") (lambda () (interactive) (shell-command (executable-find "lockscreen"))))
#+END_EXAMPLE

Then it was a matter of also locking on screen shutdown:
[[https://unix.stackexchange.com/questions/81692/suspend-and-lock-screen-on-closing-lid-in-arch-systemd]]

* Battery Status
  :PROPERTIES:
  :CUSTOM_ID: battery-status
  :END:

Simple with fancy-battery mode (it says it is unmaintained, but it works for me from melpa)

#+BEGIN_EXAMPLE
    (use-package fancy-battery
     :ensure t
     (fancy-battery-mode))
#+END_EXAMPLE

* Simple Wifi management
  :PROPERTIES:
  :CUSTOM_ID: simple-wifi-management
  :END:

nmtui is the simplest, a good text-interface to NetworkManager. The trick was in the fact that it isn't usable in any of the Emacs terminals, wich have been my shell solution for a long while.

Abandoning the CLI effort, I have found =nm-applet= to be good. The icon docks in the bottom of my screen and it has the password-remembering and auto-connecting I had hoped for.

* Simple Quick Transitions to Multiple Monitors
  :PROPERTIES:
  :CUSTOM_ID: simple-quick-transitions-to-multiple-monitors
  :END:

When I plug in an external monitor, under KDE it simply connects (though I might have to do some resolution tweaking). In my exwm setup, nothing happens. However, exwm has solutions for this, which go into my emacs.el file:

#+BEGIN_EXAMPLE
    (require 'exwm-randr)
    (setq exwm-randr-workspace-output-plist '(0 "DP-1")) ;; DP-1 being the name of my new monitor as shown by `randr'
    (add-hook 'exwm-randr-screen-change-hook
     (lambda ()
     (start-process-shell-command
     "xrandr" nil "xrandr --output DP-1 --left-of eDP-1 --auto"))) ;; eDP-1 being the name of my original (laptop) monitor
    (exwm-enable)
    (exwm-randr-enable)
#+END_EXAMPLE

* Audio Volume
  :PROPERTIES:
  :CUSTOM_ID: audio-volume
  :END:

I was lucky enough that I was already using Alsa for my sound, so didn't even have to install anything. In previous attempts on different devices sound was much harder to deal with. Here I could get it going with nothing but my exwm config.

#+BEGIN_EXAMPLE
    (exwm-input-set-key (kbd "<XF86AudioLowerVolume>")
     (lambda () (interactive) (shell-command "amixer set Master 5%-")))
    (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>")
     (lambda () (interactive) (shell-command "amixer set Master 5%+")))
    (exwm-input-set-key (kbd "<XF86AudioMute>")
     (lambda () (interactive) (shell-command "amixer set Master 1+ toggle")))
#+END_EXAMPLE

* Screen Brightness
  :PROPERTIES:
  :CUSTOM_ID: screen-brightness
  :END:

I have hardware keys that worked wonderfully under kde to dim and brighten my screen. How can I regain this functionality? The answer is in the light package (which works far more easily than xbacklight, which always told me ‘No outputs have backlight property'.

[[https://github.com/haikarainen/light]]

Following the instructions to install, I then set my keys appropriately:

#+BEGIN_EXAMPLE
    (exwm-input-set-key (kbd "<XF86MonBrightnessDown>") (lambda () (interactive) (shell-command "light -U 5; light")))
    (exwm-input-set-key (kbd "<XF86MonBrightnessUp>") (lambda () (interactive) (shell-command "light -A 5; light")))
#+END_EXAMPLE

* Screenshot
  :PROPERTIES:
  :CUSTOM_ID: screenshot
  :END:

The last thing I realized I needed when writing this post was the ability to make a screenshot. My favorite screenshot tool is that which ships with KDE, *Spectacle*. Since it is already installed for me, I just bound it to my Printscreen key:

#+BEGIN_EXAMPLE
    (exwm-input-set-key (kbd "<print>") (lambda () (interactive) (start-process-shell-command "spectacle" nil "spectacle")))
#+END_EXAMPLE

* Alt-Tab Buffer-swapping
  :PROPERTIES:
  :CUSTOM_ID: alt-tab-buffer-swapping
  :END:

The library iflipb makes short work of regaining the =alt+tab= functionality that I work with heavily on every other system. Once it was downloaded, I just set the configuration:

#+BEGIN_EXAMPLE
    (exwm-input-set-key (kbd "M-<tab>") 'iflipb-next-buffer)
    (exwm-input-set-key (kbd "M-<iso-lefttab>") 'iflipb-previous-buffer)
#+END_EXAMPLE

* My Full Setup
  :PROPERTIES:
  :CUSTOM_ID: my-full-setup
  :END:

use-package makes configuration easy and clean. Here's from my emacs.el, which includes a few snippets that I haven't described here:

#+BEGIN_EXAMPLE
    (use-package exwm
     :ensure t
     :init
     (setq mouse-autoselect-window t
     focus-follows-mouse t)
     (use-package exwm-config)
     (require 'exwm-randr)
     (setq exwm-workspace-show-all-buffers t)
     (setq exwm-layout-show-all-buffers t)
     (setq exwm-randr-workspace-output-plist '(0 "DP1"))
     (add-hook 'exwm-randr-screen-change-hook
     (lambda ()
     (start-process-shell-command
     "xrandr" nil "xrandr --output DP1 --left-of eDP1 --auto")))
     (exwm-enable)
     (exwm-randr-enable) ; https://github.com/ch11ng/exwm/wiki
     (require 'exwm-systemtray)
     (exwm-systemtray-enable)
     :config
     (add-hook 'exwm-update-class-hook
     (lambda () (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name) (string= "gimp" exwm-instance-name))
     (exwm-workspace-rename-buffer exwm-class-name))))
     (defun tsa/exwm-rename ()
     (interactive)
     (exwm-workspace-rename-buffer (concat exwm-class-name " : " exwm-title)))
    (add-hook 'exwm-update-title-hook 'tsa/exwm-rename)
    (setq tsa/default-simulation-keys
     '(
     ;; move
     ([?\C-b] . left)
     ([?\M-b] . C-left)
     ([?\C-f] . right)
     ([?\M-f] . C-right)
     ([?\C-p] . up)
     ([?\C-n] . down)
     ([?\M-<] . C-home)
     ([?\M->] . C-end)
     ([?\C-a] . home) 
     ([?\C-e] . end) ;; in spreadsheets: C-e C-p - go to top; C-e C-n - go to bottom
     ([?\M-v] . prior)
     ([?\C-v] . next)
     ;; delete
     ([?\C-d] . delete)
     ([?\C-k] . (S-end delete))
     ([?\M-d] . (C-S-right delete))
     ;; cut/copy/paste.
     ;([?\C-w] . ?\C-x)
     ([?\M-w] . ?\C-c)
     ([?\C-y] . ?\C-v)
     ;; search
     ([?\C-s] . ?\C-f)
     ))
    (exwm-input-set-simulation-keys tsa/default-simulation-keys)
    (exwm-input-set-key (kbd "s-r") 'exwm-reset)
    (exwm-input-set-key (kbd "s-n") 'tsa/exwm-rename)
    (exwm-input-set-key (kbd "s-N") 'rename-buffer)
    (exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)
    (exwm-input-set-key (kbd "s-f")
     (lambda ()
     (interactive)
     (start-process-shell-command "firefox" nil "firefox")))
    (exwm-input-set-key (kbd "s-t")
     (lambda ()
     (interactive)
     (start-process-shell-command "Telegram" nil "Telegram")))
    (exwm-input-set-key (kbd "s-<f7>") (lambda () (interactive) (shell-command (executable-find "touchpad_toggle"))))
    (exwm-input-set-key (kbd "C-c o") 'hydra-global-org/body)
    (exwm-input-set-key (kbd "C-M-o") 'hydra-window/body)
    (exwm-input-set-key (kbd "s-l") (lambda () (interactive) (shell-command (executable-find "lockscreen"))))
    (exwm-input-set-key (kbd "<f8>") 'tsa/go-or-make-agenda)
    (exwm-input-set-key (kbd "<f11>") 'helm-org-capture-templates)
    (exwm-input-set-key (kbd "<f9>") 'tsa/quick-gnus)
    (exwm-input-set-key (kbd "<XF86AudioLowerVolume>") (lambda () (interactive) (shell-command "amixer set Master 2%-")))
    (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>") (lambda () (interactive) (shell-command "amixer set Master 2%+")))
    (exwm-input-set-key (kbd "<XF86AudioMute>") (lambda () (interactive) (shell-command "amixer set Master 1+ toggle")))
    (exwm-input-set-key (kbd "<XF86MonBrightnessDown>") (lambda () (interactive) (shell-command "light -U 5; light")))
    (exwm-input-set-key (kbd "<XF86MonBrightnessUp>") (lambda () (interactive) (shell-command "light -A 5; light")))
    (exwm-input-set-key (kbd "<print>") (lambda () (interactive) (start-process-shell-command "spectacle" nil "spectacle")))
    (exwm-input-set-key (kbd "s-<f9>") (lambda () (interactive) (shell-command "/home/torysa/bin/get-mail &" nil nil)))
    (exwm-input-set-key (kbd "M-<tab>") 'iflipb-next-buffer)
    (exwm-input-set-key (kbd "M-<iso-lefttab>") 'iflipb-previous-buffer))
#+END_EXAMPLE
